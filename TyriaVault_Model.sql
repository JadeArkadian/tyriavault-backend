CREATE SCHEMA IF NOT EXISTS schema_tyriavault;

CREATE  TABLE schema_tyriavault.achievements ( 
	id                   integer  NOT NULL  ,
	name_es              text  NOT NULL  ,
	name_fr              text  NOT NULL  ,
	name_en              text  NOT NULL  ,
	name_de              text  NOT NULL  ,
	description_es       text    ,
	description_fr       text    ,
	description_en       text    ,
	description_de       text    ,
	achievement_type     varchar(60)  NOT NULL  ,
	flags                jsonb    ,
	icon                 text    ,
	last_fetched         timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_achievements PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.currencies ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	description_es       text    ,
	description_fr       text    ,
	description_en       text    ,
	description_de       text    ,
	icon_url             varchar    ,
	CONSTRAINT pk_currencies PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.dyes ( 
	id                   integer  NOT NULL  ,
	name_es              varchar(90)  NOT NULL  ,
	name_fr              varchar(90)  NOT NULL  ,
	name_en              varchar(90)  NOT NULL  ,
	name_de              varchar(90)  NOT NULL  ,
	color                char(14)  NOT NULL  ,
	CONSTRAINT pk_dyes PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.genders ( 
	id                   integer  NOT NULL  ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_genders PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.item_types ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_item_type PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.professions ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_professions PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.races ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_races PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.rarities ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_rarities PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.worlds ( 
	id                   integer  NOT NULL  ,
	name_es              varchar(100)  NOT NULL  ,
	name_fr              varchar(100)  NOT NULL  ,
	name_en              varchar(100)  NOT NULL  ,
	name_de              varchar(100)  NOT NULL  ,
	CONSTRAINT pk_worlds PRIMARY KEY ( id )
 );

CREATE  TABLE schema_tyriavault.game_accounts ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	account_name         varchar(80)  NOT NULL  ,
	world_id             integer DEFAULT 0   ,
	creation_date        timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	fractal_level        integer DEFAULT 1 NOT NULL  ,
	last_modified        timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_game_accounts PRIMARY KEY ( id ),
	CONSTRAINT fk_game_accounts_worlds FOREIGN KEY ( world_id ) REFERENCES schema_tyriavault.worlds( id ) ON DELETE SET NULL ON UPDATE CASCADE 
 );

CREATE  TABLE schema_tyriavault.items_cache ( 
	id                   bigint  NOT NULL  ,
	name_es              varchar(200)  NOT NULL  ,
	name_fr              varchar(200)  NOT NULL  ,
	name_en              varchar(200)  NOT NULL  ,
	name_de              varchar(200)  NOT NULL  ,
	item_type_id         integer  NOT NULL  ,
	icon                 text    ,
	rarity_id            integer  NOT NULL  ,
	item_level           integer    ,
	vendor_value         integer DEFAULT 0   ,
	flags                jsonb    ,
	last_fetched         timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_items_cache PRIMARY KEY ( id ),
	CONSTRAINT fk_items_cache_item_type FOREIGN KEY ( item_type_id ) REFERENCES schema_tyriavault.item_types( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_items_cache_rarities FOREIGN KEY ( rarity_id ) REFERENCES schema_tyriavault.rarities( id ) ON DELETE CASCADE ON UPDATE CASCADE 
 );

CREATE INDEX idx_items_cache_1 ON schema_tyriavault.items_cache  ( rarity_id );

CREATE INDEX idx_items_cache_0 ON schema_tyriavault.items_cache  ( item_type_id );

CREATE  TABLE schema_tyriavault.unlocked_dyes ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	game_account_id      integer  NOT NULL  ,
	dye_id               integer  NOT NULL  ,
	CONSTRAINT pk_unlocked_dyes PRIMARY KEY ( id ),
	CONSTRAINT unq_unlocked_dyes UNIQUE ( game_account_id, dye_id ) ,
	CONSTRAINT fk_unlocked_dyes_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id )   ,
	CONSTRAINT fk_unlocked_dyes_dyes FOREIGN KEY ( dye_id ) REFERENCES schema_tyriavault.dyes( id )   
 );

CREATE  TABLE schema_tyriavault.wallet ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	currency_id          integer DEFAULT 0 NOT NULL  ,
	game_account_id      integer  NOT NULL  ,
	amount               integer DEFAULT 0   ,
	CONSTRAINT pk_wallet PRIMARY KEY ( id ),
	CONSTRAINT unq_wallet UNIQUE ( currency_id, game_account_id ) ,
	CONSTRAINT fk_wallet_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_wallet_currencies FOREIGN KEY ( currency_id ) REFERENCES schema_tyriavault.currencies( id ) ON DELETE CASCADE ON UPDATE CASCADE 
 );

CREATE INDEX idx_wallet ON schema_tyriavault.wallet  ( game_account_id );

CREATE  TABLE schema_tyriavault.wallet_history ( 
	id                   bigint  NOT NULL GENERATED ALWAYS  AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	currency_id          integer  NOT NULL  ,
	game_account_id      integer  NOT NULL  ,
	amount               integer    ,
	snapshot_time        timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_wallet_history PRIMARY KEY ( id ),
	CONSTRAINT fk_wallet_history_currencies FOREIGN KEY ( currency_id ) REFERENCES schema_tyriavault.currencies( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_wallet_history_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id ) ON DELETE CASCADE ON UPDATE CASCADE 
 );

CREATE INDEX idx_wallet_history ON schema_tyriavault.wallet_history  ( game_account_id );

CREATE UNIQUE INDEX unq_wallet_history ON schema_tyriavault.wallet_history ( game_account_id, currency_id, snapshot_time );

CREATE  TABLE schema_tyriavault.api_keys ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	api_key              varchar(80)  NOT NULL  ,
	permissions          jsonb    ,
	game_account_id      integer    ,
	last_time_checked    timestamptz    ,
	CONSTRAINT pk_api_keys PRIMARY KEY ( id ),
	CONSTRAINT fk_api_keys_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id ) ON DELETE SET NULL ON UPDATE CASCADE 
 );

CREATE UNIQUE INDEX unq_api_keys ON schema_tyriavault.api_keys ( api_key );

CREATE INDEX idx_api_keys ON schema_tyriavault.api_keys  ( game_account_id );

CREATE  TABLE schema_tyriavault.bank ( 
	id                   integer  NOT NULL  ,
	game_account_id      integer  NOT NULL  ,
	item_id              bigint    ,
	stack_count          integer    ,
	charges              integer    ,
	dye01_id             integer    ,
	dye02_id             integer    ,
	dye03_id             integer    ,
	dye04_id             integer    ,
	CONSTRAINT pk_bank PRIMARY KEY ( id ),
	CONSTRAINT unq_bank_game_account_id UNIQUE ( game_account_id ) ,
	CONSTRAINT fk_bank_items_cache FOREIGN KEY ( item_id ) REFERENCES schema_tyriavault.items_cache( id ) ON DELETE SET NULL ON UPDATE CASCADE ,
	CONSTRAINT fk_bank_dyes FOREIGN KEY ( dye01_id ) REFERENCES schema_tyriavault.dyes( id )   ,
	CONSTRAINT fk_bank_dyes_0 FOREIGN KEY ( dye02_id ) REFERENCES schema_tyriavault.dyes( id )   ,
	CONSTRAINT fk_bank_dyes_1 FOREIGN KEY ( dye03_id ) REFERENCES schema_tyriavault.dyes( id )   ,
	CONSTRAINT fk_bank_dyes_2 FOREIGN KEY ( dye04_id ) REFERENCES schema_tyriavault.dyes( id )   
 );

CREATE  TABLE schema_tyriavault.characters ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	game_account_id      integer  NOT NULL  ,
	name                 varchar(100)  NOT NULL  ,
	race_id              integer  NOT NULL  ,
	gender_id            integer DEFAULT 0 NOT NULL  ,
	profession_id        integer  NOT NULL  ,
	char_level           integer DEFAULT 1 NOT NULL  ,
	CONSTRAINT pk_characters PRIMARY KEY ( id ),
	CONSTRAINT unq_name_characters UNIQUE ( name ) ,
	CONSTRAINT fk_characters_genders FOREIGN KEY ( gender_id ) REFERENCES schema_tyriavault.genders( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_characters_races FOREIGN KEY ( race_id ) REFERENCES schema_tyriavault.races( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_characters_professions FOREIGN KEY ( profession_id ) REFERENCES schema_tyriavault.professions( id ) ON DELETE CASCADE ON UPDATE CASCADE ,
	CONSTRAINT fk_characters_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id ) ON DELETE CASCADE ON UPDATE CASCADE 
 );

CREATE INDEX idx_characters ON schema_tyriavault.characters  ( game_account_id );

CREATE  TABLE schema_tyriavault.emotes ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	name                 varchar(100)    ,
	command              varchar(50)  NOT NULL  ,
	unlocking_item_id    bigint    ,
	CONSTRAINT pk_emotes_0 PRIMARY KEY ( id ),
	CONSTRAINT unq_emotes_name UNIQUE ( name ) ,
	CONSTRAINT fk_emotes_items_cache FOREIGN KEY ( unlocking_item_id ) REFERENCES schema_tyriavault.items_cache( id ) ON DELETE SET NULL ON UPDATE CASCADE 
 );

CREATE  TABLE schema_tyriavault.item_details ( 
	item_id              bigint  NOT NULL  ,
	details              jsonb  NOT NULL  ,
	CONSTRAINT pk_item_details PRIMARY KEY ( item_id ),
	CONSTRAINT fk_item_details_items_cache FOREIGN KEY ( item_id ) REFERENCES schema_tyriavault.items_cache( id ) ON DELETE CASCADE ON UPDATE CASCADE 
 );

CREATE INDEX idx_item_details ON schema_tyriavault.item_details  ( details  ) USING GIN;

CREATE  TABLE schema_tyriavault.unlocked_emotes ( 
	id                   bigint  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1  MINVALUE 0  ) ,
	game_account_id      integer  NOT NULL  ,
	emote_id             integer  NOT NULL  ,
	CONSTRAINT pk_emotes PRIMARY KEY ( id ),
	CONSTRAINT unq_unlocked_emotes UNIQUE ( game_account_id, emote_id ) ,
	CONSTRAINT fk_unlocked_emotes_emotes FOREIGN KEY ( emote_id ) REFERENCES schema_tyriavault.emotes( id ) ON DELETE SET NULL ON UPDATE CASCADE ,
	CONSTRAINT fk_unlocked_emotes_game_accounts FOREIGN KEY ( game_account_id ) REFERENCES schema_tyriavault.game_accounts( id )   
 );

CREATE INDEX idx_unlocked_emotes ON schema_tyriavault.unlocked_emotes  ( game_account_id );

COMMENT ON COLUMN schema_tyriavault.worlds.id IS 'Id of the world -> supplied by the GW2 API';

COMMENT ON COLUMN schema_tyriavault.worlds.name_es IS 'Name in spanish';

COMMENT ON COLUMN schema_tyriavault.worlds.name_fr IS 'Name in french';

COMMENT ON COLUMN schema_tyriavault.worlds.name_en IS 'Name in english';

COMMENT ON COLUMN schema_tyriavault.worlds.name_de IS 'Name in german';

COMMENT ON TABLE schema_tyriavault.game_accounts IS 'Table holding info about the game account of GW2';

COMMENT ON COLUMN schema_tyriavault.game_accounts.id IS 'Game account ID -> Auto generated by TyriaAccount';

COMMENT ON COLUMN schema_tyriavault.game_accounts.account_name IS 'The name of the game account';

COMMENT ON COLUMN schema_tyriavault.game_accounts.world_id IS 'Id referencing the world where the account is from';

COMMENT ON COLUMN schema_tyriavault.game_accounts.creation_date IS 'Creation date of this account';

COMMENT ON COLUMN schema_tyriavault.game_accounts.fractal_level IS 'The fractal level of the account. Usually a number between 1 and 100';

COMMENT ON COLUMN schema_tyriavault.game_accounts.last_modified IS 'When was this account last time modified (as perceived by the API) ?';

COMMENT ON TABLE schema_tyriavault.wallet IS 'Table holding info about every currency holded by a game_account';

COMMENT ON COLUMN schema_tyriavault.wallet.id IS 'Id of the tuple. Generated by TyriaAccount';

COMMENT ON COLUMN schema_tyriavault.wallet.currency_id IS 'The Id of referencing the currency holded';

COMMENT ON TABLE schema_tyriavault.emotes IS 'Table stocking info about the unlockable emotes of the game';

COMMENT ON COLUMN schema_tyriavault.emotes.id IS 'Id of the emote. Assigned by TyriaAccount';

COMMENT ON COLUMN schema_tyriavault.emotes.name IS 'Unique name of the emote. It''s the id from GW2 API';

COMMENT ON COLUMN schema_tyriavault.emotes.command IS 'English command of the emote';

COMMENT ON COLUMN schema_tyriavault.emotes.unlocking_item_id IS 'First item that allows the unlocking of the emote';

COMMENT ON COLUMN schema_tyriavault.unlocked_emotes.id IS 'The id of the unlocked emote. Autogenerated by TyriaAccount';

COMMENT ON COLUMN schema_tyriavault.unlocked_emotes.game_account_id IS 'Id referencing the game_account who unlocked this emote';

COMMENT ON COLUMN schema_tyriavault.unlocked_emotes.emote_id IS 'The id referencing the unlocked emote';

